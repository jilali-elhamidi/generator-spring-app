package com.example.modules.{{module}}.controller;

import com.example.modules.{{module}}.dto.{{entityName}}Dto;
import com.example.modules.{{module}}.dtosimple.{{entityName}}SimpleDto;
import com.example.modules.{{module}}.model.{{entityName}};
import com.example.modules.{{module}}.mapper.{{entityName}}Mapper;
import com.example.modules.{{module}}.service.{{entityName}}Service;
import com.example.core.controller.BaseController;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.List;
import java.util.Map;

/**
 * Controller for managing {{entityName}} entities.
 */
@RestController
@RequestMapping("/api/{{entityNameLowercase}}s")
public class {{entityName}}Controller extends BaseController<{{entityName}}, {{entityName}}Dto, {{entityName}}SimpleDto> {

    public {{entityName}}Controller({{entityName}}Service {{entityNameLowercase}}Service,
                                    {{entityName}}Mapper {{entityNameLowercase}}Mapper) {
        super({{entityNameLowercase}}Service, {{entityNameLowercase}}Mapper);
    }

    @GetMapping
    public ResponseEntity<Page<{{entityName}}Dto>> getAll{{entityName}}s(Pageable pageable) {
        return doGetAll(pageable);
    }

    @GetMapping("/search")
    public ResponseEntity<Page<{{entityName}}Dto>> search{{entityName}}s(
            @RequestParam Map<String, String> filters,
            Pageable pageable
    ) {
        return doSearch({{entityName}}.class, filters, pageable);
    }

    @GetMapping("/{id}")
    public ResponseEntity<{{entityName}}Dto> get{{entityName}}ById(@PathVariable Long id) {
        return doGetById(id);
    }

    @PostMapping
    public ResponseEntity<{{entityName}}Dto> create{{entityName}}(
            @Valid @RequestBody {{entityName}}Dto {{entityNameLowercase}}Dto,
            UriComponentsBuilder uriBuilder) {

        {{entityName}} entity = mapper.toEntity({{entityNameLowercase}}Dto);
        {{entityName}} saved = service.save(entity);

        URI location = uriBuilder
                .path("/api/{{entityNameLowercase}}s/{id}")
                .buildAndExpand(saved.getId())
                .toUri();

        return ResponseEntity.created(location).body(mapper.toDto(saved));
    }

    @PostMapping("/batch")
    public ResponseEntity<List<{{entityName}}Dto>> createAll{{entityName}}s(
            @Valid @RequestBody List<{{entityName}}Dto> {{entityNameLowercase}}DtoList,
            UriComponentsBuilder uriBuilder) {

        List<{{entityName}}> entities = mapper.toEntityList({{entityNameLowercase}}DtoList);
        List<{{entityName}}> savedEntities = service.saveAll(entities);

        URI location = uriBuilder.path("/api/{{entityNameLowercase}}s").build().toUri();

        return ResponseEntity.created(location).body(mapper.toDtoList(savedEntities));
    }

    @PutMapping("/{id}")
    public ResponseEntity<{{entityName}}Dto> update{{entityName}}(
            @PathVariable Long id,
            @Valid @RequestBody {{entityName}}Dto {{entityNameLowercase}}Dto) {

        {{entityName}} entityToUpdate = mapper.toEntity({{entityNameLowercase}}Dto);
        {{entityName}} updatedEntity = service.update(id, entityToUpdate);
        return ResponseEntity.ok(mapper.toDto(updatedEntity));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete{{entityName}}(@PathVariable Long id) {
        return doDelete(id);
    }
}