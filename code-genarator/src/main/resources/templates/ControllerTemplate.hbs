package com.example.modules.{{module}}.controller;

import com.example.modules.{{module}}.dto.{{entityName}}Dto;
import com.example.modules.{{module}}.model.{{entityName}};
import com.example.modules.{{module}}.mapper.{{entityName}}Mapper;
import com.example.modules.{{module}}.service.{{entityName}}Service;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.List;
import java.util.Map;


@RestController
@RequestMapping("/api/{{entityNameLowercase}}s")
public class {{entityName}}Controller {

    private final {{entityName}}Service {{entityNameLowercase}}Service;
    private final {{entityName}}Mapper {{entityNameLowercase}}Mapper;

    public {{entityName}}Controller({{entityName}}Service {{entityNameLowercase}}Service,
                                    {{entityName}}Mapper {{entityNameLowercase}}Mapper) {
        this.{{entityNameLowercase}}Service = {{entityNameLowercase}}Service;
        this.{{entityNameLowercase}}Mapper = {{entityNameLowercase}}Mapper;
    }

    @GetMapping
    public ResponseEntity<Page<{{entityName}}Dto>> getAll{{entityName}}s(Pageable pageable) {
        Page<{{entityName}}> page = {{entityNameLowercase}}Service.findAll(pageable);
        return ResponseEntity.ok(page.map({{entityNameLowercase}}Mapper::toDto));
    }

    @GetMapping("/search")
    public ResponseEntity<Page<{{entityName}}Dto>> search{{entityName}}s(
            @RequestParam Map<String, String> filters,
            Pageable pageable
    ) {
        Page<{{entityName}}> page = {{entityNameLowercase}}Service.search(filters, pageable);
        return ResponseEntity.ok(page.map({{entityNameLowercase}}Mapper::toDto));
    }

    @GetMapping("/{id}")
    public ResponseEntity<{{entityName}}Dto> get{{entityName}}ById(@PathVariable Long id) {
        return {{entityNameLowercase}}Service.findById(id)
                .map({{entityNameLowercase}}Mapper::toDto)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<{{entityName}}Dto> create{{entityName}}(
            @Valid @RequestBody {{entityName}}Dto {{entityNameLowercase}}Dto,
            UriComponentsBuilder uriBuilder) {

        {{entityName}} entity = {{entityNameLowercase}}Mapper.toEntity({{entityNameLowercase}}Dto);
        {{entityName}} saved = {{entityNameLowercase}}Service.save(entity);

        URI location = uriBuilder
                                .path("/api/{{entityNameLowercase}}s/{id}")
                                .buildAndExpand(saved.getId())
                                .toUri();

        return ResponseEntity.created(location).body({{entityNameLowercase}}Mapper.toDto(saved));
    }

    @PostMapping("/batch")
    public ResponseEntity<List<{{entityName}}Dto>> createAll{{entityName}}s(
            @Valid @RequestBody List<{{entityName}}Dto> {{entityNameLowercase}}DtoList,
            UriComponentsBuilder uriBuilder) {

        List<{{entityName}}> entities = {{entityNameLowercase}}Mapper.toEntityList({{entityNameLowercase}}DtoList);
        List<{{entityName}}> savedEntities = {{entityNameLowercase}}Service.saveAll(entities);

        URI location = uriBuilder.path("/api/{{entityNameLowercase}}s").build().toUri();

        return ResponseEntity.created(location).body({{entityNameLowercase}}Mapper.toDtoList(savedEntities));
    }

    @PutMapping("/{id}")
    public ResponseEntity<{{entityName}}Dto> update{{entityName}}(
            @PathVariable Long id,
            @Valid @RequestBody {{entityName}}Dto {{entityNameLowercase}}Dto) {


        {{entityName}} entityToUpdate = {{entityNameLowercase}}Mapper.toEntity({{entityNameLowercase}}Dto);
        {{entityName}} updatedEntity = {{entityNameLowercase}}Service.update(id, entityToUpdate);

        return ResponseEntity.ok({{entityNameLowercase}}Mapper.toDto(updatedEntity));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete{{entityName}}(@PathVariable Long id) {
        boolean deleted = {{entityNameLowercase}}Service.deleteById(id);

        if (!deleted) {
        return ResponseEntity.notFound().build();
        }

        return ResponseEntity.noContent().build();
    }
}