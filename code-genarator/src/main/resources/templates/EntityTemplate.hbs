package com.example.modules.{{module}}.model;

import com.example.core.module.BaseEntity;
import jakarta.persistence.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import jakarta.validation.constraints.*;
import java.util.List;
import java.time.LocalDateTime;
{{#if hasDate}}import java.util.Date;{{/if}}
{{#each relationships}}import com.example.modules.{{../module}}.model.{{type}};{{/each}}
import lombok.Data;
import lombok.EqualsAndHashCode;

@Entity
@Table(name = "{{entityNameLowercase}}_tbl")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@Data
@EqualsAndHashCode(callSuper = true)
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class {{entityName}} extends BaseEntity {

// === Attributs simples ===
{{#each fields~}}
{{#if validation}}
    {{#if validation.notBlank}}@NotBlank{{/if~}}
    {{#if validation.notNull}}@NotNull{{/if~}}
    {{#if validation.size~}}
        {{#if validation.size.min~}}
            {{#if validation.size.max}}@Size(min = {{validation.size.min}}, max = {{validation.size.max}}){{else}}@Size(min = {{validation.size.min}}){{/if~}}
            {{else~}}
            {{#if validation.size.max}}@Size(max = {{validation.size.max}}){{/if~}}
        {{/if~}}
    {{/if~}}
    {{#if validation.min}}@Min({{validation.min}}){{/if~}}
    {{#if validation.max}}@Max({{validation.max}}){{/if~}}
    {{#if validation.positive}}@Positive{{/if~}}
    {{#if validation.email}}@Email{{/if~}}
{{/if}}
    private {{type}} {{name}};
{{/each}}

// === Relations ===
{{#each relationships}}
    {{#if (eq relationType "ManyToOne")~}}
        @ManyToOne(fetch = FetchType.{{fetch}}, cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name = "{{joinColumn}}")
    @JsonIgnoreProperties("{{inverseField}}")
    private {{type}} {{name}};
    {{/if~}}
    {{#if (eq relationType "OneToMany")~}}
        @OneToMany(mappedBy = "{{mappedBy}}", cascade = CascadeType.PERSIST, orphanRemoval = false, fetch = FetchType.{{fetch}})
    @JsonIgnoreProperties("{{mappedBy}}")
    private List<{{type}}> {{name}};
    {{/if~}}
    {{#if (eq relationType "OneToOne")~}}
        {{#if owner~}}
            @OneToOne
    @JoinColumn(name = "{{joinColumn}}")
    @JsonIgnoreProperties("{{inverseField}}")
    private {{type}} {{name}};
            {{else~}}
            @OneToOne(mappedBy = "{{mappedBy}}", fetch = FetchType.{{fetch}}, cascade = CascadeType.ALL)
    @JsonIgnoreProperties("{{inverseField}}")
    private {{type}} {{name}};
        {{/if~}}
    {{/if~}}
    {{#if (eq relationType "ManyToMany")~}}
        {{#if owner~}}
            @ManyToMany(fetch = FetchType.{{fetch}})
            @JoinTable(name = "{{joinTable}}",
            joinColumns = @JoinColumn(name = "{{joinColumns}}"),
            inverseJoinColumns = @JoinColumn(name = "{{inverseJoinColumns}}"))
            @JsonIgnoreProperties("{{inverseField}}")
            private List<{{type}}> {{name}};
            {{else~}}
            @ManyToMany(mappedBy = "{{mappedBy}}", fetch = FetchType.{{fetch}})
            @JsonIgnoreProperties("{{inverseField}}")
            private List<{{type}}> {{name}};
        {{/if~}}
    {{/if~}}
{{/each}}

}